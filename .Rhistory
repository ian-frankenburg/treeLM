c(s0,i0,h0,r0)
run_shiny(model = "mySIR",
neweqns = mySIRS,
ics = c(S = 9999, I = 1, R = 0),
parm0 = c(beta = 5e-5, gamma = 1/7, delta = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-5, gamma = 1/21, delta = 1/365),
parm_max = c(beta = 9e-5, gamma = 1 , delta = 1))
run_shiny(model = "mySIR",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0),
parm0 = c(beta = 5e-5, gamma = 1/7, delta = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-5, gamma = 1/21, delta = 1/365),
parm_max = c(beta = 9e-5, gamma = 1 , delta = 1))
run_shiny(model = "mySIR",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0),
parm0 = c(beta = 5e-5, gamma = 1/7, delta = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-5, gamma = 1/21, delta = 1/365),
parm_max = c(beta = 9e-5, gamma = 1 , delta = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS = -beta * I * S;
##dE = beta * S * I / N - alpha * E;
dI = -gamma * I - kappa * I;
dH = kappa * I - delta * H;
dR = delta * H + gamma * I;
return(list(c(dS,dI,dH,dR)))
})
}
N <- 2000000
h0 <- cases[1]
e0 <- floor(0.2 * h0)
i0 <- floor(h0/.15)
s0 <- N - i0
r0 <- 0
s0 <- N - i0-h0
c(s0,i0,h0,r0)
N<-1000
h0 <- 3
i0 <- 1
r0 <- 0
s0 <- N - i0-h0
c(s0,i0,h0,r0)
run_shiny(model = "mySIR",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0),
parm0 = c(beta = 5e-5, gamma = 1/7, delta = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-5, gamma = 1/21, delta = 1/365),
parm_max = c(beta = 9e-5, gamma = 1 , delta = 1))
mySIRS <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I + delta * R
# Change in Infecteds
dI <- beta * S * I - gamma * I
# Change in Recovereds
dR <- gamma * I - delta * R
return(list(c(dS, dI, dR)))
})
}
run_shiny(model = "SIRS (w/out demography)",
neweqns = mySIRS,
ics = c(S = 9999, I = 1, R = 0),
parm0 = c(beta = 5e-5, gamma = 1/7, delta = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-5, gamma = 1/21, delta = 1/365),
parm_max = c(beta = 9e-5, gamma = 1 , delta = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I + delta * R
# Change in Infecteds
dI <- beta * S * I - gamma * I-mu*I
# Change in Recovereds
dR <- gamma * I - delta * R
dB <- mu*I
return(list(c(dS, dI, dR)))
})
}
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-5, gamma = 1/21, mu = 1/365),
parm_max = c(beta = 9e-5, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-10, gamma = 0, mu = 0),
parm_max = c(beta = 10, gamma = 10 , mu = 10))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-10, gamma = 1e-5, mu = 2e-5),
parm_max = c(beta = 10, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-10, gamma = 1e-5, mu = 2e-5),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-10, gamma = 1e-5, mu = 2e-5),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-10, gamma = 1e-5, mu = 2e-5),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Loss of immunity"),
parm_min = c(beta = 1e-10, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 9999, I = 1, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-10, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 1000, I = 10, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-5, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 100, I = 10, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-5, gamma = 1e-5, mu = 0),
parm_max = c(beta = 5, gamma = 5 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = 100, I = 10, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-5, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 5 , mu = 1))
N <-1000
i0=10
s0=N-i0
r0=0
d0=0
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = s0, I = i0, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-5, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 5 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I/N
# Change in Infecteds
dI <- beta * S * I/N - gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
N <-1000
i0=10
s0=N-i0
r0=0
d0=0
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = s0, I = i0, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-5, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 5 , mu = 1))
N <-1000
N <-1000
N <-1000
N <-1000
i0=10/N
s0=(N-i0)/N
r0=0
d0=0
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I- gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
N <-1000
i0=10/N
s0=(N-i0)/N
r0=0
d0=0
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = s0, I = i0, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-5, gamma = 1e-5, mu = 0),
parm_max = c(beta = 1, gamma = 5 , mu = 1))
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = s0, I = i0, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-3, gamma = 1e-3, mu = 0),
parm_max = c(beta = 1, gamma = 1 , mu = 1))
mySIR <- function(t, y, parms) {
with(as.list(c(y, parms)),{
# Change in Susceptibles
dS <- - beta * S * I
# Change in Infecteds
dI <- beta * S * I- gamma * I - mu*I
# Change in Recovereds
dR <- gamma * I
dD <- mu*I
return(list(c(dS, dI, dR, dD)))
})
}
N <-1000
i0=10/N
s0=(N-i0)/N
r0=0
d0=0
run_shiny(model = "SIRD",
neweqns = mySIR,
ics = c(S = s0, I = i0, R = 0, D=0),
parm0 = c(beta = 5e-5, gamma = 1/7, mu = 0.1),
parm_names = c("Transmission rate", "Recovery rate", "Death Rate"),
parm_min = c(beta = 1e-3, gamma = 1e-3, mu = 0),
parm_max = c(beta = 1, gamma = 0.5 , mu = 0.5))
devtools::install_github(“jacekpardyak/resume”)
library(devtools)
devtools::install_github(“jacekpardyak/resume”
devtools::install_github(“jacekpardyak/resume”)
install.packages("rmarkdown")
library(rmarkdown)
draft("MyArticle.Rmd", template = "cover_letter", package = "resumeR")
rdirchlet::
library(gtools)
rdirichlet(1,.9,.1-.000001,000001)
rdirichlet(1,c(.9,.1-.000001,000001))
rdirichlet(1,c(.9,.1-.000001,000001))
rdirichlet(1,c(.9,.1-1e-10,1e-10))
rdirichlet(1,c(.9,.1-1e-10,1e-10))
rdirichlet(1,c(.9,.1-1e-10,1e-10))
rdirichlet(1,c(.9,.1-1e-10,1e-10))
rdirichlet(1,c(.9,.1-1e-10,1e-10))
b=runif(1,0,1)
a=1-b
b
a
c=1-b-a
c
"""
Example script that runs the ODIN regression on the Lorenz '96 model.
Gabriele Abbati, Machine Learning Research Group, University of Oxford
February 2019
"""
# Import libraries
import numpy as np
import tensorflow as tf
from odin import Lorenz96
from odin import TrainableLorenz96
from odin import ODIN
# Fix the random seeds for reproducibility
seed = 3298514
np.random.seed(seed)
tf.set_random_seed(seed)
# 1) Use the provided utilities class to simulate some noisy observations of
#    the Lorenz '96 model
n_states = 10  # Number of states, can be changed to the preferred setting
lorenz96_simulator = Lorenz96(n_states=n_states,
true_param=8.0,
noise_variance=1.0)
system_obs, t_obs = lorenz96_simulator.observe(initial_state=1.0,
initial_time=0.0,
final_time=5.0,
t_delta_integration=0.01,
t_delta_observation=0.1)
n_states, n_points = system_obs.shape
# 2) Initialize the provided TrainableLorenz96 class
# Trainable object
trainable_l96 = TrainableLorenz96(n_states, n_points)
# 3) Run the actual ODIN regression by initializing the optimizer, building the
#    model and calling the fit() function
# ODIN optimizer
odin_optimizer = ODIN(trainable_l96,
system_obs,
t_obs,
gp_kernel='Matern32',  # For L96 we use the Matern kernel
optimizer='L-BFGS-B',  # L-BFGS-B optimizer for the bounds
initial_gamma=1.0,  # initial gamma value
train_gamma=True,  # gamma will be trained as well
single_gp=False,  # Here we use one GP per state
basinhopping=False,  # we don't use the basinhopping here
time_normalization=True,  # time normalization on
state_normalization=True)  # states normalization on
# Build the model
odin_optimizer.build_model()
# Fit the model
final_theta, final_gamma, final_x = odin_optimizer.fit()
reticulate::repl_python()
devtools::create("treeLM")
library(treeLM)
remove.packages("treeLM")
library(rpart)
library(devtools)
library(devtools)
train <- data.frame(
ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE)
)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
install_github("ian-frankenburg/treeLM")
library(treeLM)
train <- data.frame(
ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE)
)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
library(rpart)
train <- data.frame(
ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE)
)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
treelm(mytree)
treelm(mytree)
devtools::document()
devtools::document()
setwd("~/treeLM")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
