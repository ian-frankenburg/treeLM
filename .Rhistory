county = "Santa Clara"
locs = which(statewide_cases$county==county)
yI = statewide_cases$totalcountconfirmed[locs]
plot(diff(yI, lag=14))
yD = statewide_cases$totalcountdeaths[locs]
plot(yD)
locs = which(hospitals_by_county$county==county)
yH = hospitals_by_county$hospitalized_covid_patients[locs]
plot(yH)
plot(yH, main="Hospitalized")
plot(diff(yI,10), main="Infected")
plot(yD,main="Deaths")
hospitals_by_county <- read.csv("~/Desktop/JAGS_and_stan/hospitals_by_county.csv")
statewide_cases <- read.csv("~/Desktop/JAGS_and_stan/statewide_cases.csv")
View(statewide_cases$county)
#extract county to investigate
county = "Santa Clara"
locs = which(statewide_cases$county==county)
yI = statewide_cases$totalcountconfirmed[locs]
plot(diff(yI, lag=14))
yD = statewide_cases$totalcountdeaths[locs]
plot(yD)
locs = which(hospitals_by_county$county==county)
yH = hospitals_by_county$hospitalized_covid_patients[locs]
plot(yH)
plot(yH, main="Hospitalized")
plot(diff(yI,10), main="Infected")
plot(yD,main="Deaths")
#extract county to investigate
county = "San Fransisco"
locs = which(statewide_cases$county==county)
locs
#extract county to investigate
county = "San Francisco"
locs = which(statewide_cases$county==county)
locs
locs = which(statewide_cases$county==county)
yI = statewide_cases$totalcountconfirmed[locs]
plot(diff(yI, lag=14))
yD = statewide_cases$totalcountdeaths[locs]
plot(yD)
locs = which(hospitals_by_county$county==county)
yH = hospitals_by_county$hospitalized_covid_patients[locs]
plot(yH)
plot(yH, main="Hospitalized")
plot(diff(yI,10), main="Infected")
plot(yD,main="Deaths")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
rstan:::rstudio_stanc("~/Desktop/JAGS_and_stan/Stan/Spatial Models/vanilla_sir.stan")
library(bartBMA)
N <- 100
p<- 100
set.seed(100)
epsilon <- rnorm(N)
xcov <- matrix(runif(N*p), nrow=N)
y <- sin(pi*xcov[,1]*xcov[,2]) + 20*(xcov[,3]-0.5)^2+10*xcov[,4]+5*xcov[,5]+epsilon
epsilontest <- rnorm(N)
xcovtest <- matrix(runif(N*p), nrow=N)
ytest <- sin(pi*xcovtest[,1]*xcovtest[,2]) + 20*(xcovtest[,3]-0.5)^2+10*xcovtest[,4]+5*xcovtest[,5]+epsilontest
bart_bma <- bartBMA(x.train = xcov,y.train=y,x.test=xcovtest,
zero_split = 1, only_max_num_trees = 1,split_rule_node = 0)
bart_bma <- bartBMA.default(x.train = xcov,y.train=y,x.test=xcovtest,
zero_split = 1, only_max_num_trees = 1,split_rule_node = 0)
bart_bma <- bartBMA.default(x.train = xcov,y.train=y,x.test=xcovtest)
detach("package:bartBMA", unload = TRUE)
library(treeLM)
remove.packages("treeLM")
library(devtools)
githubinstall("treeLM")
install_github("ian-frankenburg/treeLM")
library(treeLM)
library(treeLM)
library(treeLM)
library(rpart)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
train <- data.frame(
ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE)
)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
treelm
treelm()
library(treeLM)
library(treeLM)
library(rpart)
train <- data.frame(
ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE)
)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
treelm(mytree)
treeLM::treelm(mytree)
remove.packages("treeLM")
library(devtools)
install_github("ian-frankenburg/tree")
install_github("ian-frankenburg/treeLM")
library(treeLM)
train <- data.frame(
ClaimID = c(1,2,3),
RearEnd = c(TRUE, FALSE, TRUE),
Fraud = c(TRUE, FALSE, TRUE)
)
mytree <- rpart(
Fraud ~ RearEnd,
data = train,
method = "class"
)
treelm(mytree)
treeLM::treelm(mytree)
treelm(mytree)
treeLM()
treelm()
session_info()
setwd("~/treeLM")
